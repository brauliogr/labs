apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    esMajorVersion: "7"
  generation: 1
  labels:
    app: elasticsearch-7-master-test
  name: elasticsearch-7-master-test-a
  namespace: elk-test
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: elasticsearch-7-master-test
  serviceName: elasticsearch-7-master-test-headless
  template:
    metadata:
      labels:
        app: elasticsearch-7-master-test
      name: elasticsearch-7-master-test-a
    spec:
      # affinity:
      #   podAntiAffinity:
      #     requiredDuringSchedulingIgnoredDuringExecution:
      #     - labelSelector:
      #         matchExpressions:
      #         - key: app
      #           operator: In
      #           values:
      #           - elasticsearch-7-master
      #       topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: node.name
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: cluster.initial_master_nodes
          value: elasticsearch-7-master-test-a-0,elasticsearch-7-master-test-b-0,elasticsearch-7-master-test-c-0
        - name: discovery.seed_hosts
          value: elasticsearch-7-master-test-headless
        - name: cluster.name
          value: idm-events
        - name: network.host
          value: 0.0.0.0
        - name: ES_JAVA_OPTS
          value: -Xmx512m -Xms512m
        - name: node.data
          value: "false"
        - name: node.ingest
          value: "true"
        - name: node.master
          value: "true"
        - name: node.remote_cluster_client
          value: "true"
        - name: ES_DISCOVERY_SERVICE
          value: "elasticsearch-7-discovery-test"
        image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
        imagePullPolicy: IfNotPresent
        name: elasticsearch
        ports:
        - containerPort: 9200
          name: http
          protocol: TCP
        - containerPort: 9300
          name: transport
          protocol: TCP 
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - |
              #!/usr/bin/env bash -e
              # If the node is starting up wait for the cluster to be ready (request params: 'wait_for_status=green&timeout=1s' )
              # Once it has started only check that the node itself is responding
              START_FILE=/tmp/.es_start_file

              http () {
                  local path="${1}"
                  if [ -n "${ELASTIC_USERNAME}" ] && [ -n "${ELASTIC_PASSWORD}" ]; then
                    BASIC_AUTH="-u ${ELASTIC_USERNAME}:${ELASTIC_PASSWORD}"
                  else
                    BASIC_AUTH=''
                  fi
                  curl -XGET -s -k --fail ${BASIC_AUTH} http://127.0.0.1:9200${path}
              }

              if [ -f "${START_FILE}" ]; then
                  echo 'Elasticsearch is already running, lets check the node is healthy'
                  http "/"
              else
                  echo 'Waiting for elasticsearch cluster to become cluster to be ready (request params: "wait_for_status=green&timeout=1s" )'
                  if http "/_cluster/health?wait_for_status=green&timeout=1s" ; then
                      touch ${START_FILE}
                      exit 0
                  else
                      echo 'Cluster is not yet ready (request params: "wait_for_status=green&timeout=1s" )'
                      exit 1
                  fi
              fi
          failureThreshold: 3
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        resources:
          limits:
            cpu: 1000m
            memory: 1500Mi
          requests:
            cpu: 200m
            memory: 1Gi
        securityContext:
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          runAsUser: 1000
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: elasticsearch-7-master-test
        - mountPath: /usr/share/elasticsearch/config/certs
          name: elastic-certificates
        - mountPath: /usr/share/elasticsearch/config/certs-gen
          name: tls-certificates
        - name: es-config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          readOnly: true
          subPath: elasticsearch.yml
      dnsPolicy: ClusterFirst      
      initContainers:
      - command:
        - sysctl
        - -w
        - vm.max_map_count=262144
        image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
        imagePullPolicy: IfNotPresent
        name: configure-sysctl
        resources: {}
        securityContext:
          privileged: true
          runAsUser: 0
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      - command:
        - sh
        - -c
        - |
          #!/usr/bin/env bash
          set -euo pipefail
          elasticsearch-certutil cert \
            --name ${NODE_NAME} \
            --days 10000 \
            --ip ${POD_IP} \
            --dns ${NODE_NAME},${POD_SERVICE_NAME},${POD_SERVICE_NAME_HEADLESS},${NODE_NAME}.${POD_SERVICE_NAME},${NODE_NAME}.${POD_SERVICE_NAME_HEADLESS},${NODE_NAME}.${POD_SERVICE_NAME_HEADLESS} \
            --ca-cert /usr/share/elasticsearch/config/certs/tls.crt \
            --ca-key /usr/share/elasticsearch/config/certs/tls.key  \
            --ca-pass "" \
            --pass "" \
            --out /usr/share/elasticsearch/config/certs-gen/keystore.p12
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: POD_SERVICE_NAME
          value: "elasticsearch-7-master-test"
        - name: POD_SERVICE_NAME_HEADLESS
          value: "elasticsearch-7-master-test-headless"
        image: docker.elastic.co/elasticsearch/elasticsearch:7.16.2
        imagePullPolicy: IfNotPresent
        name: setup-tls-cert
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/config/certs
          name: elastic-certificates
        - mountPath: /usr/share/elasticsearch/config/certs-gen
          name: tls-certificates
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        fsGroup: 1000
      terminationGracePeriodSeconds: 120
      volumes:
      - name: es-config
        configMap:
          name: elasticsearch-7-master-test
      - name: tls-certificates
        emptyDir: {}
      - name: elastic-certificates 
        secret:
          secretName: es-ca-cert
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
  - metadata:
      name: elasticsearch-7-master-test
    spec:
      storageClassName: manual
      accessModes: [ ReadWriteOnce ]
      resources:
        requests:
          storage: 30Gi